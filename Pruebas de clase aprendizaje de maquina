{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP7QN7DZhlUBptyuHBMUlIS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sebasveos/Page-Portfolio/blob/main/Pruebas%20de%20clase%20aprendizaje%20de%20maquina\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mw09LV2DJ8HS",
        "outputId": "1172e84f-a8dd-4805-e751-a4346ab5e6d2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Resultado 1: 16.0 <class 'int'>\n",
            "Resultado 2: 21\n",
            "Resultado 2:21\n"
          ]
        }
      ],
      "source": [
        "resultado1 = 5+3*8/2-1;\n",
        "resultado2 = 6-2+5*3+2;\n",
        "\n",
        "print(\"Resultado 1: %s %s\"%(resultado1, type(resultado2)));\n",
        "print(\"Resultado 2: {}\".format(resultado2));\n",
        "print(f\"Resultado 2:{resultado2}\");\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nombre = input('Nombre: ');\n",
        "edad = input('Edad: ');\n",
        "peso = input('Peso: ');\n",
        "estatura = input('Estura: ');\n",
        "\n",
        "IMC = float(peso) / (float(estatura)**2)\n",
        "\n",
        "##print(f\"Indice de masa corporal:{IMC}\");\n",
        "\n",
        "print(IMC);\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pCgef0zwMcZq",
        "outputId": "46c3620d-1af8-45f6-b376-5f338148f702"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nombre: s\n",
            "Edad: 24\n",
            "Peso: 60\n",
            "Estura: 60\n",
            "0.016666666666666666\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "frutas = [\"manzana\",\"sandia\",\"pera\",\"Uva\",\"Pera\" ]\n",
        "\n",
        "type(frutas)\n",
        "\n",
        "dir(frutas);"
      ],
      "metadata": {
        "collapsed": true,
        "id": "efMdjPkXO69s"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(frutas)\n",
        "\n",
        "print(frutas[1:3])\n",
        "\n",
        "\n",
        "#Lee desde la [1] de dos en dos\n",
        "print(frutas[1:6:2])\n",
        "\n",
        "print(frutas[:3])\n",
        "\n",
        "print(frutas[::2])\n",
        "\n",
        "#Invertir lista\n",
        "print(frutas[::-2])\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kdveZodhSC1v",
        "outputId": "60cc2dce-b737-4c94-f599-de8f8ebb1493"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['manzana', 'sandia', 'pera', 'Uva', 'Pera']\n",
            "['sandia', 'pera']\n",
            "['sandia', 'pera', 'Uva', 'Pera']\n",
            "['manzana', 'sandia', 'pera']\n",
            "['manzana', 'pera', 'Pera']\n",
            "['Pera', 'pera', 'manzana']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Para general\n",
        "\n",
        "print(list(range(1,40,2)))\n",
        "\n",
        "print(list(range(50,10,-1)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OCusvnUQUDzH",
        "outputId": "09220bf0-b326-43b2-c190-511980e610ae"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]\n",
            "[50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "texto = \"este es un texto\"\n",
        "\n",
        "print(texto[10:20])\n",
        "\n",
        "print(texto[10:20])\n",
        "\n",
        "print(texto[::-1])\n",
        "\n",
        "palabras = texto.split()\n",
        "print(palabras)\n",
        "\n",
        "palabras[1] = palabras[1].upper()\n",
        "print(palabras[::-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f3uEyI67VQ1w",
        "outputId": "cce347a9-3849-4931-88f2-a444bbf75544"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " texto\n",
            " texto\n",
            "otxet nu se etse\n",
            "['este', 'es', 'un', 'texto']\n",
            "['texto', 'un', 'ES', 'este']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Valores de la tupla\n",
        "mi_tupla = (1, \"Manzana\", [1,True,0,2])\n",
        "\n",
        "print(type(mi_tupla))\n",
        "\n",
        "print(mi_tupla[2][3])\n",
        "\n",
        "mi_tupla[2].append(\"Ola\")\n",
        "\n",
        "print(mi_tupla[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7JKpmPuWW1av",
        "outputId": "168736b1-f195-483d-90a6-6315d4cfeec4"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'tuple'>\n",
            "2\n",
            "[1, True, 0, 2, 'Ola']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Lista que viene de otro lugar\n",
        "\n",
        "resulset = [(1, \"Juan\", 2000),\n",
        "            (2,\"Maria\",3000),\n",
        "            (3,\"Pedro\", 5000)\n",
        "           ]\n",
        "\n",
        "for i in resulset:\n",
        "  print(i[1])\n",
        "\n",
        "for id,nombre,salario in resulset:\n",
        "  print(f\"El empleado {id}, Se llama {nombre} y su salario es {salario}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ixqBTqHYubm",
        "outputId": "f77a2e41-0073-4117-c393-9606e32ed61e"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Juan\n",
            "Maria\n",
            "Pedro\n",
            "El empleado 1, Se llama Juan y su salario es 2000\n",
            "El empleado 2, Se llama Maria y su salario es 3000\n",
            "El empleado 3, Se llama Pedro y su salario es 5000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Diccionario**"
      ],
      "metadata": {
        "id": "Lxlsk_1zbaID"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mi_dic = {\"id\":1, \"nombre\":\"Juan\",\"salario\":20000}\n",
        "\n",
        "print(mi_dic)\n",
        "print(type(mi_dic))\n",
        "\n",
        "print(\"Metodo 1: EL usuario {id}, Se llama {nombre} y su salario es {salario}\".format(**mi_dic))\n",
        "print(\"Metodo 2: EL usuario {id}, Se llama {nombre} y su salario es {salario}\".format(id=mi_dic[\"id\"],nombre=mi_dic[\"nombre\"],salario=mi_dic[\"salario\"]))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jlQsl0nXbeWE",
        "outputId": "a84991c2-3f46-4f2c-f59b-b58e5c37b42c"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'id': 1, 'nombre': 'Juan', 'salario': 20000}\n",
            "<class 'dict'>\n",
            "Metodo 1: EL usuario 1, Se llama Juan y su salario es 20000\n",
            "Metodo 2: EL usuario 1, Se llama Juan y su salario es 20000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "resulset = [{\"id\":1, \"nombre\":\"Juan\",\"salario\": 2000},\n",
        "            {\"id\":2, \"nombre\":\"Maria\",\"salario\": 3000},\n",
        "            {\"id\":3, \"nombre\":\"Pedro\",\"salario\": 5000}\n",
        "           ]\n",
        "\n",
        "print(\"Metodo 1: EL usuario {id}, Se llama {nombre} y su salario es {salario}\".format(**resulset[0]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HnMdMuvac57W",
        "outputId": "d16a7479-8bf2-4512-a66e-1ebbd7332530"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metodo 1: EL usuario 1, Se llama Juan y su salario es 2000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "resulset = {\"id\":1, \"nombre\":\"Juan\",\"salario\":20000}"
      ],
      "metadata": {
        "id": "J-pyv7fqeW-F"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "llaves = resulset.keys()\n",
        "\n",
        "print(llaves)  #Diccionario\n",
        "print(resulset.values())\n",
        "print(resulset.items())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IlZdoLY7d8GM",
        "outputId": "b38db4f2-ba99-4da9-dd5a-bc8229feeb5b"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['id', 'nombre', 'salario'])\n",
            "dict_values([1, 'Juan', 20000])\n",
            "dict_items([('id', 1), ('nombre', 'Juan'), ('salario', 20000)])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Conjuntos(Set)**"
      ],
      "metadata": {
        "id": "eaCxwdIpj46v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "conjunto = {1,2,3,4,5}\n",
        "conjunto2 = {4,5,6,7}\n",
        "\n",
        "lista = [1,3,1,1,2,3,4,5,3,2,3,3,4]"
      ],
      "metadata": {
        "id": "gZ1pbCLpjwng"
      },
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conjunto3 = set(lista)\n",
        "\n",
        "print(conjunto)\n",
        "print(conjunto2)\n",
        "print(conjunto3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6aq7yODPkTnZ",
        "outputId": "8d132ca3-f5e5-4ef6-95a5-fd105effdf00"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2, 3, 4, 5}\n",
            "{4, 5, 6, 7}\n",
            "{1, 2, 3, 4, 5}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(conjunto.intersection(conjunto2))\n",
        "print(conjunto.union(conjunto2))\n",
        "print(conjunto.difference(conjunto2))\n",
        "print(conjunto2.difference(conjunto))\n",
        "print(conjunto.symmetric_difference(conjunto2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BFlAro2pk3ck",
        "outputId": "7c3ec1ab-faba-4a69-b98f-8d4d37169359"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{4, 5}\n",
            "{1, 2, 3, 4, 5, 6, 7}\n",
            "{1, 2, 3}\n",
            "{6, 7}\n",
            "{1, 2, 3, 6, 7}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = conjunto.pop()\n",
        "\n",
        "print(x)\n",
        "print(conjunto)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UTpVhvB5lkA2",
        "outputId": "ff2bbdad-84ae-4a8d-e08f-2e12712bceda"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "{2, 3, 4, 5}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "edad = input(\"Ingrese su edad: \")\n",
        "\n",
        "if int(edad) >= 18:\n",
        "  print(\"Es mayor de edad\")\n",
        "else:\n",
        "  print(\"Es menor de edad\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vs6KdC74l936",
        "outputId": "f132545a-5cf7-40c1-9150-5a79d5f15424"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese su edad: 12\n",
            "Es menor de edad\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ac + b = 0\n",
        "\n",
        "a = float(input(\"Ingrese el valor de a: \"))\n",
        "b = float(input(\"Ingrese el valor de b: \"))\n",
        "\n",
        "print(f\"El valor de x es: {b/a}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OYJsvzfkm1Ji",
        "outputId": "bea1252c-8044-4e5f-ca1b-4547f033c8fa"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese el valor de a: 1\n",
            "Ingrese el valor de b: 1\n",
            "El valor de x es: 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = float(input(\"Ingrese el valor de a: \"))\n",
        "b = float(input(\"Ingrese el valor de b: \"))\n",
        "c = float(input(\"Ingrese el valor de c: \"))\n",
        "\n",
        "d = (b**2 - 4*a*c)\n",
        "print(d)\n",
        "\n",
        "if d == 0:\n",
        "  print(f\"Las raices son iguales y tiene ell valor de: {b/(2*a)}\")\n",
        "elif d > 0:\n",
        "  print(f\"Las raices son: \\nx1 = {-b + d**0.5/(2*a)} \")\n",
        "  print(f\"Las raices son: \\nx1 = {-b + d**0.5/(2*a)} \")\n",
        "else:\n",
        "  print(\"No tiene raices reales\")"
      ],
      "metadata": {
        "id": "MfEgvBIyoP74"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "suma = 0\n",
        "natural1 = 0\n",
        "\n",
        "while suma <= 500:\n",
        "  natural1 = natural1 + 2\n",
        "  #natural1 +=1\n",
        "  suma = suma + natural1\n",
        "\n",
        "print(natural1)\n",
        "\n",
        "print(suma)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yWWV2r0UqDrJ",
        "outputId": "e1aec908-9c38-47a0-dc8d-3e60e57d7aac"
      },
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "44\n",
            "506\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "valor = 3\n",
        "for i in range(1,101):\n",
        "\n",
        "  print(f\"3*{i} = {valor}\")\n",
        "  valor += 3*1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "ENWbuvukq5PP",
        "outputId": "d3d91bbc-402e-4c78-de82-d73effe94253"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3*1 = 3\n",
            "3*2 = 6\n",
            "3*3 = 9\n",
            "3*4 = 12\n",
            "3*5 = 15\n",
            "3*6 = 18\n",
            "3*7 = 21\n",
            "3*8 = 24\n",
            "3*9 = 27\n",
            "3*10 = 30\n",
            "3*11 = 33\n",
            "3*12 = 36\n",
            "3*13 = 39\n",
            "3*14 = 42\n",
            "3*15 = 45\n",
            "3*16 = 48\n",
            "3*17 = 51\n",
            "3*18 = 54\n",
            "3*19 = 57\n",
            "3*20 = 60\n",
            "3*21 = 63\n",
            "3*22 = 66\n",
            "3*23 = 69\n",
            "3*24 = 72\n",
            "3*25 = 75\n",
            "3*26 = 78\n",
            "3*27 = 81\n",
            "3*28 = 84\n",
            "3*29 = 87\n",
            "3*30 = 90\n",
            "3*31 = 93\n",
            "3*32 = 96\n",
            "3*33 = 99\n",
            "3*34 = 102\n",
            "3*35 = 105\n",
            "3*36 = 108\n",
            "3*37 = 111\n",
            "3*38 = 114\n",
            "3*39 = 117\n",
            "3*40 = 120\n",
            "3*41 = 123\n",
            "3*42 = 126\n",
            "3*43 = 129\n",
            "3*44 = 132\n",
            "3*45 = 135\n",
            "3*46 = 138\n",
            "3*47 = 141\n",
            "3*48 = 144\n",
            "3*49 = 147\n",
            "3*50 = 150\n",
            "3*51 = 153\n",
            "3*52 = 156\n",
            "3*53 = 159\n",
            "3*54 = 162\n",
            "3*55 = 165\n",
            "3*56 = 168\n",
            "3*57 = 171\n",
            "3*58 = 174\n",
            "3*59 = 177\n",
            "3*60 = 180\n",
            "3*61 = 183\n",
            "3*62 = 186\n",
            "3*63 = 189\n",
            "3*64 = 192\n",
            "3*65 = 195\n",
            "3*66 = 198\n",
            "3*67 = 201\n",
            "3*68 = 204\n",
            "3*69 = 207\n",
            "3*70 = 210\n",
            "3*71 = 213\n",
            "3*72 = 216\n",
            "3*73 = 219\n",
            "3*74 = 222\n",
            "3*75 = 225\n",
            "3*76 = 228\n",
            "3*77 = 231\n",
            "3*78 = 234\n",
            "3*79 = 237\n",
            "3*80 = 240\n",
            "3*81 = 243\n",
            "3*82 = 246\n",
            "3*83 = 249\n",
            "3*84 = 252\n",
            "3*85 = 255\n",
            "3*86 = 258\n",
            "3*87 = 261\n",
            "3*88 = 264\n",
            "3*89 = 267\n",
            "3*90 = 270\n",
            "3*91 = 273\n",
            "3*92 = 276\n",
            "3*93 = 279\n",
            "3*94 = 282\n",
            "3*95 = 285\n",
            "3*96 = 288\n",
            "3*97 = 291\n",
            "3*98 = 294\n",
            "3*99 = 297\n",
            "3*100 = 300\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random as ra"
      ],
      "metadata": {
        "id": "JF1_7gi9r2Ro"
      },
      "execution_count": 147,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(ra.randint(1,100))\n",
        "print(ra.randrange(1,50,5))\n",
        "print(ra.random())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wxu_hxYxsC6X",
        "outputId": "7873aa31-e5d3-44df-e041-9040e27ef3e2"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "31\n",
            "21\n",
            "0.1031660342307158\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ra.seed(4)\n",
        "print(ra.random())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KnJvylcFslPP",
        "outputId": "f7a62e60-90e8-4263-cbde-4eccf995c1ef"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.23604808973743452\n"
          ]
        }
      ]
    }
  ]
}